# SPDX-License-Identifier: Apache-2.0
# Copyright 2023 Authors of Nimbus

apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: csib-matchall-ns-add-csib
spec:
  description: >
    Multiple scenarios are tested here
    1. Three namespaces are created - prod, dev, staging - and we create a csib with a 
      matchAll condition (*). This is supposed to create nimbus policies in all namespaces
      except kube-system. 
    2. Then we delete the prod namespace, and verify that the nimbus policy no longer exists
       in that namespace. The nimbus policies in the other namespaces should not be affected.
    3. The we create the prod namespace again, and verify that the nimbus policy in prod
      namespace is created again. Additionally, the existing nimbus policies are unaffected
  steps:
    - name: "Create prod, dev, staging Namespaces"
      try:
        - apply:
            file: ns.yaml

    - name: "Create a SecurityIntent"
      try:
        - apply:
            file: ../../resources/namespaced/dns-manipulation-si.yaml

    - name: "Create a ClusterSecurityIntentBinding"
      try:
        - apply:
            file: dns-manipulation-csib.yaml

    - name: "Verify ClusterNimbusPolicy creation"
      try:
        - assert:
            file: cluster-nimbus-policy-assert.yaml

    - name: "Verify NimbusPolicy creation in default"
      try:
        - assert:
            file: nimbus-policy-assert.yaml

    - name: "Verify NimbusPolicy creation in dev namespace"
      try:
        - assert:
            file: nimbus-policy-assert-dev.yaml

    - name: "Verify NimbusPolicy creation in staging namespace"
      try:
        - assert:
            file: nimbus-policy-assert-staging.yaml

    - name: "Verify NimbusPolicy creation in prod namespace"
      try:
        - assert:
            file: nimbus-policy-assert-prod.yaml

    - name: "Delete prod namespace"
      try:
        - delete:
            ref:
              apiVersion: v1
              kind: namespace
              name: prod
            expect:
              - match:
                  # this check applies only if the match
                  # statement below evaluates to `true`
                  apiVersion: v1
                  kind: namespace
                  name: prod
                check:
                  # an error is expected, this will:
                  # - succeed if the operation failed
                  # - fail if the operation succeeded
                  ($error != null): true

    - name: "Verify the NimbusPolicy deletion"
      try:
        - script:
            content: kubectl -n prod get np nimbus-ctlr-gen-dns-manipulation-binding
            check:
              ($error != null): true

    - name: "Verify ClusterNimbusPolicy presence"
      try:
        - assert:
            file: cluster-nimbus-policy-assert.yaml

    - name: "Verify NimbusPolicy presence in default"
      try:
        - assert:
            file: nimbus-policy-assert.yaml

    - name: "Verify NimbusPolicy presence in dev namespace"
      try:
        - assert:
            file: nimbus-policy-assert-dev.yaml

    - name: "Verify NimbusPolicy presence in staging namespace"
      try:
        - assert:
            file: nimbus-policy-assert-staging.yaml

    - name: "Create prod Namespace again"
      try:
        - apply:
            file: ns.yaml

    - name: "Verify ClusterNimbusPolicy presence"
      try:
        - assert:
            file: cluster-nimbus-policy-assert.yaml

    - name: "Verify NimbusPolicy presence in default"
      try:
        - assert:
            file: nimbus-policy-assert.yaml

    - name: "Verify NimbusPolicy presence in dev namespace"
      try:
        - assert:
            file: nimbus-policy-assert-dev.yaml

    - name: "Verify NimbusPolicy presence in staging namespace"
      try:
        - assert:
            file: nimbus-policy-assert-staging.yaml

    - name: "Verify NimbusPolicy creation in prod namespace"
      try:
        - assert:
            file: nimbus-policy-assert-prod.yaml
