# SPDX-License-Identifier: Apache-2.0
# Copyright 2023 Authors of Nimbus

apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: kubearmor-policy-creation-and-validation-exploit-pfa
spec:
  description: >
   This test validates that creating a `expolit-pfa` SecurityIntent with SecurityIntentBinding generates the expected KubeArmor policy and verifies its effect on a sample test workload.
  steps:
    - name: "Create a SecurityIntent"
      try:
        - apply:
            file: ../../resources/namespaced/exploit-pfa-si.yaml

    - name: "Create a SecurityIntentBinding"
      try:
        - apply:
            file: ../../resources/namespaced/exploit-pfa-sib.yaml

    - name: "Verify NimbusPolicy creation"
      try:
        - assert:
            file: ../nimbus-policy-assert.yaml

    
    - name: "Verify KubeArmorPolicy creation"
      try:
        - assert:
            file: ../ksp.yaml
    
    - name: "Verify status of created SecurityIntentBinding"
      description: >
        Verify the created SecurityIntentBinding status subresource includes the number and names of bound intents, 
        along with the generated NimbusPolicy name.
      try:
        - assert:
            file: ../sib-status-assert.yaml

    - name: "Verify status of created NimbusPolicy"
      try:
        - assert:
            file: ../np-status-assert.yaml

    - name: "Verify that the corresponding NimbusPolicy status has been updated with the generated KubeArmor Policy"
      try:
      - script:
          content: kubectl get np -n $NAMESPACE exploit-pfa-binding -o=jsonpath='{.status.adapterPolicies}'
          check: 
            (contains($stdout, 'KubeArmorPolicy/exploit-pfa-binding-preventexecutionfromtemporlogsfolders')): true

    - name: "create nginx pod"
      try:
        - script:
            content: kubectl create -f https://raw.githubusercontent.com/5GSEC/nimbus/main/docs/attack-emulation/pod.yaml

    - name: "verify creation of nginx pod"
      try:
      - script:
          content: kubectl get pods -l app=nginx -o name
          check:
            (contains($stdout, 'pod/nginx')): true
    
    - name: "install git inside nginx pod"
      try:
        - script:
            content: kubectl exec -it nginx -- /bin/bash -c "apt-get update && apt-get install -y git"

    - name: "move git binary to tmp/ folder"
      try:
        - script:
            content: kubectl exec -it nginx -- /bin/bash -c "cp /usr/bin/git /tmp/"      
      
    
    - name: "Verify the failure in cloning a repo via git binary in tmp/ folder in nginx pod"
      try:
      - script:
          content: kubectl exec -it nginx -- /bin/bash -c "/tmp/git clone https://github.com/thockin/test.git"
          check:
            ($error != null): true
      
            
   

    
    
